[{"C:\\Users\\karth\\OneDrive\\Desktop\\Web Development\\covid-19-tracker-react\\src\\index.js":"1","C:\\Users\\karth\\OneDrive\\Desktop\\Web Development\\covid-19-tracker-react\\src\\App.js":"2","C:\\Users\\karth\\OneDrive\\Desktop\\Web Development\\covid-19-tracker-react\\src\\reportWebVitals.js":"3","C:\\Users\\karth\\OneDrive\\Desktop\\Web Development\\covid-19-tracker-react\\src\\Table.js":"4","C:\\Users\\karth\\OneDrive\\Desktop\\Web Development\\covid-19-tracker-react\\src\\util.js":"5","C:\\Users\\karth\\OneDrive\\Desktop\\Web Development\\covid-19-tracker-react\\src\\Map.js":"6","C:\\Users\\karth\\OneDrive\\Desktop\\Web Development\\covid-19-tracker-react\\src\\LineGraph.js":"7","C:\\Users\\karth\\OneDrive\\Desktop\\Web Development\\covid-19-tracker-react\\src\\InfoBox.js":"8"},{"size":500,"mtime":1625911265488,"results":"9","hashOfConfig":"10"},{"size":7573,"mtime":1626074864821,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1625911265527,"results":"12","hashOfConfig":"10"},{"size":480,"mtime":1626032881266,"results":"13","hashOfConfig":"10"},{"size":2073,"mtime":1626030375790,"results":"14","hashOfConfig":"10"},{"size":810,"mtime":1625916832967,"results":"15","hashOfConfig":"10"},{"size":2709,"mtime":1625940652967,"results":"16","hashOfConfig":"10"},{"size":1776,"mtime":1626025856512,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"m5m9gh",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\karth\\OneDrive\\Desktop\\Web Development\\covid-19-tracker-react\\src\\index.js",[],["37","38"],"C:\\Users\\karth\\OneDrive\\Desktop\\Web Development\\covid-19-tracker-react\\src\\App.js",["39"],"C:\\Users\\karth\\OneDrive\\Desktop\\Web Development\\covid-19-tracker-react\\src\\reportWebVitals.js",[],"C:\\Users\\karth\\OneDrive\\Desktop\\Web Development\\covid-19-tracker-react\\src\\Table.js",[],"C:\\Users\\karth\\OneDrive\\Desktop\\Web Development\\covid-19-tracker-react\\src\\util.js",["40"],"import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\nimport { lightGreen } from \"@material-ui/core/colors\";\n\nexport const casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.25)\",\n    mulitiplier: 800,\n  },\n  active:{\n    hex:\"rgba(0,123,255,.52549019607843137)\",\n    half_op:\"rgba(72,163,255,0.25)\",\n    mulitiplier: 3000,\n  },\n  recovered: {\n    hex: \"rgb(10,140,40)\",\n    rgb: \"rgb(120, 215, 29)\",\n    half_op: \"rgba(125,215,29, 0.25)\",\n    mulitiplier: 1200,\n  },\n\n  deaths: {\n    hex: \"#808080\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(169, 164, 164, 0.2)\",\n    mulitiplier: 3500,\n  },\n};\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n\n  sortedData.sort((a, b) => b.cases - a.cases);\n\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n//Draw circles on the map\nexport const showDataOnMap = (data, casesType) =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      pathOptions={{\n        color: casesTypeColors[casesType].hex,\n        fillColor: casesTypeColors[casesType].hex,\n      }}\n      radius={\n        Math.sqrt(country[casesType] / 10) *\n        casesTypeColors[casesType].mulitiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","C:\\Users\\karth\\OneDrive\\Desktop\\Web Development\\covid-19-tracker-react\\src\\Map.js",[],"C:\\Users\\karth\\OneDrive\\Desktop\\Web Development\\covid-19-tracker-react\\src\\LineGraph.js",["41"],"import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport { casesTypeColors } from \"./util\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType = \"cases\") => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\nconst generateActiveCases = (data) => {\n  let active = {};\n  for (let date in data[\"cases\"]) {\n    active[date] =\n      data[\"cases\"][date] - data[\"recovered\"][date] - data[\"deaths\"][date];\n  }\n  return active;\n};\nfunction LineGraph({ casesType, ...props }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          if (casesType === \"active\") {\n            let activeCases = generateActiveCases(data);\n            data[\"active\"] = activeCases;\n            console.log(\"active \", data);\n            casesType = \"active\";\n            //  return;\n          }\n          setData(buildChartData(data, casesType));\n\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: casesTypeColors[casesType].half_op,\n                borderColor: casesTypeColors[casesType].hex,\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","C:\\Users\\karth\\OneDrive\\Desktop\\Web Development\\covid-19-tracker-react\\src\\InfoBox.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":18,"column":8,"nodeType":"48","messageId":"49","endLine":18,"endColumn":29},{"ruleId":"46","severity":1,"message":"50","line":4,"column":10,"nodeType":"48","messageId":"49","endLine":4,"endColumn":20},{"ruleId":"51","severity":1,"message":"52","line":88,"column":25,"nodeType":"53","endLine":88,"endColumn":33},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'BootstrapSwitchButton' is defined but never used.","Identifier","unusedVar","'lightGreen' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'casesType' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","no-global-assign","no-unsafe-negation"]